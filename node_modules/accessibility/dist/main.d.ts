import 'regenerator-runtime/runtime.js';
import { Common } from './common';
import { IAccessibility, IAccessibilityOptions, ISessionState, IStateValues } from './interfaces/accessibility.interface';
import { IMenuInterface } from './interfaces/menu.interface';
export declare class Accessibility implements IAccessibility {
    static CSS_CLASS_NAME: string;
    static MENU_WIDTH: string;
    private _isReading;
    private _common;
    private _storage;
    private _options;
    private _sessionState;
    private _htmlInitFS;
    private _body;
    private _html;
    private _icon;
    private _menu;
    private _htmlOrgFontSize;
    private _stateValues;
    private _recognition;
    private _speechToTextTarget;
    private _onKeyDownBind;
    private _fixedDefaultFont;
    menuInterface: IMenuInterface;
    options: IAccessibilityOptions;
    constructor(options?: IAccessibilityOptions);
    get stateValues(): IStateValues;
    set stateValues(value: IStateValues);
    get html(): HTMLElement;
    get body(): HTMLBodyElement;
    get sessionState(): ISessionState;
    set sessionState(value: ISessionState);
    get common(): Common;
    get recognition(): any;
    get isReading(): boolean;
    set isReading(value: boolean);
    get fixedDefaultFont(): string;
    private get defaultOptions();
    initFontSize(): void;
    fontFallback(): void;
    addDefaultOptions(options: IAccessibilityOptions): void;
    addModuleOrderIfNotDefined(): void;
    disabledUnsupportedFeatures(): void;
    injectCss(injectFull: boolean): void;
    removeCSS(): void;
    injectIcon(): HTMLElement;
    parseKeys(arr: Array<any>): string;
    injectMenu(): HTMLElement;
    getVoices(): Promise<SpeechSynthesisVoice[]>;
    injectTts(): Promise<void>;
    addListeners(): void;
    sortModuleTypes(): void;
    disableUnsupportedModulesAndSort(): void;
    resetAll(): void;
    resetTextSize(): void;
    resetLineHeight(): void;
    resetTextSpace(): void;
    alterTextSize(isIncrease: boolean): void;
    alterLineHeight(isIncrease: boolean): void;
    alterTextSpace(isIncrease: boolean): void;
    speechToText(): void;
    textToSpeech(text: string): void;
    createScreenShot(url: string): Promise<string>;
    listen(): void;
    read(e: Event): void;
    runHotkey(name: string): void;
    toggleMenu(): void;
    invoke(action: string, button: HTMLElement): void;
    onKeyDown(e: KeyboardEvent): void;
    build(): void;
    updateReadGuide(e: Event | TouchEvent | any): void;
    resetIfDefined(src: string, dest: any, prop: string): void;
    onChange(updateSession: boolean): void;
    saveSession(): void;
    setSessionFromCache(): void;
    destroy(): void;
}
export default Accessibility;
